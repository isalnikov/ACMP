/**
 * https://toster.ru/q/5783
 *
 * https://habrahabr.ru/sandbox/61205/
 *
 * http://pikabu.ru/story/prostaya_zadacha_s_sobesedovaniya_v_yandeks_422901
 *
 * http://polycode.livejournal.com/29426.html?thread=139762
 * 
 * 
 * http://lmndeit.kg/2016/03/23/hr-yandex/
 * 
 * https://xakep.ru/2014/02/14/jobinterview-tasks-181/
 * 
 * http://it.icmp.ru/post/view/4549
 * 
 * 
 * 
 */
package ru.isalnikov.yandex;

/**
 * 1000 бутылок вина, 1 отравлена, 10 кроликов. Можно взять немного вина из
 * бутылки. От яда кролик умирает в через 1 день. Сколько минимально дней
 * потребуется чтобы определить бутылку с ядом?
 * 
*
 * Алгоритм также можно обобщить для произвольных N (количества бутылок) и K
 * (количества кроликов): нужно просто сгруппировать бутылки и пронумеровать
 * группы, так, чтобы хватило на всех. Однако, т.к. в худшем случае (бутылка
 * номер 1023, пусть её и нет в нашем конкретном случае) помирают все кролики,
 * то необходимо будет использовать не двоичную нумерацию, а иную, и
 * использовать группы кроликов (один кролик был частным случаем, группой из
 * одного), чтобы всегда какая-то группа кроликов не выпивала из какой-то группы
 * бутылок и оставалось достаточное количество кроликов для второго и
 * последующих дней. Там может быть много соображений, касающихся разбиений на
 * группы, один из них может быть максимизация произведения G = (C0 + 1)*(C1 +
 * 1)*...*(C(M-1)+1) при достижении оптимального S = (C0 - 1) + (C1 - 1) + ... +
 * (C(M-1) - 1), где CJ – количество кроликов в J-ой группе (сумма CI для I jот
 * 0 до (M-1) равна K), а M – количество групп. Далее мы разбиваем бутылки на G
 * количество групп, нумеруем их странным образом (I-ая цифра номера может
 * принимать значения от 0 до (CI - 1)) и по итогам дня составляем номер группы
 * бутылок по номерам померших кроликов в каждой группе (аналогично частному
 * случаю, просто конкатенируем цифры). S – количество кроликов, которое выживет
 * после текущего дня в худшем случае, показатель избыточности нашего разбиения.
 * Для частного решения выше, M = 2**10, S = 0 т.е. он использует кроликов
 * нещадно и имеет максимальный M (составить алгоритм оптимизации M и S для
 * случая нескольких дней – для достижения минимизации количества этих самых
 * требуемых дней – предлагаю читателю в качестве упражнения – задача требует
 * некоторого анализа, который выйдет за рамки короткого примечания в решении
 * простой задачи).
 *
 * Ещё примечание. Наверное, есть специальная литература по этой области теории
 * алгоритмов. Наверное, если бы я её читал, мне бы не потребовалось думать над
 * задачей несколько часов пока я не пришёл к правильному ответу (я даже начал
 * было набирать здесь камент, думая, что меньше двух дней никак не сделать).
 *
 * И ещё одно примечание. А, вообще, тестировать на няшных и пушыстых кроликах
 * всякие вредные вещества – неправильно, гораздо этичнее и практичнее было бы
 * выявлять яды никого ими не отравляя
 *
 *
 * 1. Даем каждому кролику попить из 90 бутылок. Остается 100 неиспитых. 
 * 2.1.
 * Кролик умер. Даем каждому кролику по 9 бутылок. Остается 9 неиспитых. 
 * 2.1.1
 * Кролик умер. Даем каждому кролику по 1 бутылке и одну оставляем. К концу дня
 * находим бутылку. 
 * 2.1.2 Кролики живы. Даем каждому кролику по 1 бутылке. К концу дня находим бутылку.
 * 2.2 Кролики живы. Значит нужно проверить 100
 * бутылок и есть 10 кроликов. Даем каждому кролику по 9 бутылок. 10 оставляем.
 * 2.2.1 Кролик умер. Есть 9 бутылок и 9 кроликов. К концу дня находим бутылку.
 * 2.2.2 Кролики живы. Есть 10 бутылок и 10 кроликов. К концу дня находим бутылку.
 *
 */


//http://algolist.manual.ru/  -  сборник алгоритмов


// http://rosettacode.org/wiki/Category:Sorting_Algorithms  -  виды сортировок 


//https://habrahabr.ru/post/204600/ - Пузырьковая сортировка и все-все-все

//Как правильно делать сортировку в Java
//http://info.javarush.ru/translation/2014/06/14/%D0%9A%D0%B0%D0%BA-%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE-%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C-%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D1%83-%D0%B2-Java.html 

//Точный поиск подстроки в строке
//http://algolist.manual.ru/search/esearch/index.php