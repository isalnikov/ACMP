package ru.isalnikov.acmp.acmp39;

/**
 * Одного неформала выгнали с работы, и теперь ему надо как-то зарабатывать себе
 * на жизнь. Поразмыслив, он решил, что сможет иметь очень неплохие деньги на
 * продаже собственных волос. Известно, что пункты приема покупают волосы
 * произвольной длины стоимостью С у.е. за каждый сантиметр. Так как волосяной
 * рынок является очень динамичным, то цена одного сантиметра волос меняется
 * каждый день как и курс валют. Неформал является очень хорошим
 * бизнес-аналитиком. Он смог вычислить, какой будет цена одного сантиметра
 * волос в каждый из ближайших N дней (для удобства пронумеруем дни в
 * хронологическом порядке от 0 до N-1). Теперь он хочет определить, в какие из
 * этих дней ему следует продавать волосы, чтобы по истечению всех N дней
 * заработать максимальное количество денег. Заметим, что волосы у неформала
 * растут только ночью и вырастают на 1 сантиметр за ночь. Следует также учесть,
 * что до 0-го дня неформал с горя подстригся наголо и к 0-му дню длина его
 * волос составляла 1 сантиметр.
 *
 * Входные данные
 *
 * В первой строке входного файла INPUT.TXT записано целое число N (0 < N ≤
 * 100). Во второй строке через пробел заданы N натуральных чисел, не
 * превосходящих 100, соответствующие стоимости C[i] 1 сантиметра волос за
 * каждый i-й день.
 *
 *
 */
import java.io.*;
import java.util.*;

class Main {

    public static void main(String[] args) {
        try (Scanner in = new Scanner(System.in);
                PrintWriter out = new PrintWriter(System.out)) {

            int n = in.nextInt();
            int a[] = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = in.nextInt();

            }

            int ans = 0;
            int i = -1;
            do {
                int maxj = 0;
                int max = 0;
                for (int j = i + 1; j < n; ++j) {
                    if (a[j] > max) {
                        max = a[j];
                        maxj = j;
                    }
                }
                ans += a[maxj] * (maxj - (i + 1) + 1);
                i = maxj;
            } while (i != n - 1);

            out.print(ans);

            out.flush();
        }
    }
}
